from tkinter import *
import tkinter.font as font
import base64
import os

root = Tk()
root.title("Simple Calculator")

# The Base64 icon version as a string
icon = \
""" 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
RK5CYII=
"""
icondata= base64.b64decode(icon)
# The temp file is icon.ico
tempFile= "icon.ico"
iconfile= open(tempFile,"wb")
# Extract the icon
iconfile.write(icondata)
iconfile.close()
root.wm_iconbitmap(tempFile)
# Delete the tempfile
os.remove(tempFile)

# window resizable false
root.resizable(False,False)

# initialize input
e = Entry(root, width=15,borderwidth=5,font=("Calibri",30))
e.grid(row=0, column=0,columnspan=3,padx=10,pady=10)

# initialize global variables
mathMode = "start" # mode of operation
numCount = "start" # mode of clicking number

# functions
def button_click(number):
    global mathMode, numCount
    current = e.get()
    if current != '-' and number != '0': # avoid the -0 case
        if current == "" or numCount == "start":
            e.delete(0, END)
            e.insert(0,str(number))
            numCount = "continue"
        elif numCount == "continue":
            if current == '0': 
                e.delete(0, END)
                e.insert(0,str(number))
            elif len(current) < 14: # limit the length
                e.delete(0, END)
                e.insert(0, str(current) + str(number))

def button_dot():
    global numCount
    current = e.get()
    if current == '':
        e.insert(0,'0.')
    elif current == '-':
        e.delete(0, END)
        e.insert(0,'-0.')
    elif '.' not in current:
        e.delete(0, END)
        e.insert(0, current + '.')
    numCount == "continue"

def button_plusMinus():
    global numCount
    current = e.get()
    if current != '0': # avoid the -0 case
        if '-' not in current:
            e.delete(0, END)
            e.insert(0, '-' + current)
            numCount = "continue"
        elif '-' in current:
            e.delete(0, END)
            e.insert(0, current.replace('-',''))
            numCount = "continue"


def button_clear():
    global mathMode
    e.delete(0, END)
    mathMode = "start"

def button_mathMode(operator):
    global first_number, mathMode, numCount
    if e.get() != "" and e.get() != "-":
        first_number = e.get()
        mathMode = operator
        numCount = "start"

def button_equal():
    global mathMode, numCount
    if e.get() != "" and mathMode != "start":
        second_number = e.get()
        e.delete(0,END)
        if e.get() != "0":
            # do the +-*/ operation
            print("===")
            print(float(first_number))
            print("===")
            print(float(second_number))
            print("===")
            print(float(first_number) - float(second_number))
            if mathMode == "addition": result = float(first_number) + float(second_number)
            elif mathMode == "subtraction": result = float(first_number) - float(second_number)
            elif mathMode == "multiplication": result = float(first_number) * float(second_number)
            elif mathMode == "division": 
                if second_number == '0': # divide by zero problem
                    result = "Division By Zero"
                elif second_number != '0':
                    result = float(first_number) / float(second_number)

            # limit decimal place & overflow problem
            if not isinstance(result, str): # if not a string: exclude the case "Division By Zero"

                # limit the decimal place
                if result % 1 == 0: # remainder == 0 => integer
                    print("integer: remove the .0 meaningless decimal")
                    result = str(result).split('.')[0] # remove the .0 meaningless decimal
                elif 'e+' in str(result): # suppressing the scientific notation
                    result = "range overflow" # the result is too large to show
                elif 'e-' in str(result): 
                    result=f'{result:.12f}'
                else: # result is not an integer nor include 'e'
                    length1 = len(str(result).split('.')[0]) # find the length left to decimal
                    result = round(result, 13 - length1) # round the decimal based on length1
            print(result)
            # limit the length of result
            if len(str(result)) > 15: result = "range overflow"
            
            # print the result and reset the variables
            e.insert(0, result)
            mathMode = "start"
            numCount = "start"

# initialize buttons
button_1 = Button(root, text="1",height=1, width=5, command= lambda: button_click(1))
button_2 = Button(root, text="2",height=1, width=5, command= lambda: button_click(2))
button_3 = Button(root, text="3",height=1, width=5, command= lambda: button_click(3))
button_4 = Button(root, text="4",height=1, width=5, command= lambda: button_click(4))
button_5 = Button(root, text="5",height=1, width=5, command= lambda: button_click(5))
button_6 = Button(root, text="6",height=1, width=5, command= lambda: button_click(6))
button_7 = Button(root, text="7",height=1, width=5, command= lambda: button_click(7))
button_8 = Button(root, text="8",height=1, width=5, command= lambda: button_click(8))
button_9 = Button(root, text="9",height=1, width=5, command= lambda: button_click(9))
button_0 = Button(root, text="0",height=1, width=5, command= lambda: button_click(0))
button_dot = Button(root, text=".",height=1, width=5, command= button_dot)
button_plusMinus = Button(root, text="±",height=1, width=5, command= button_plusMinus)
button_clear = Button(root, text="Clear",height=1, width=5, command= button_clear)
button_equal = Button(root, text="=",height=1, width=5, command= button_equal)
button_add = Button(root, text="+",height=1, width=5, command= lambda: button_mathMode("addition"))
button_subtract = Button(root, text="-",height=1, width=5, command= lambda: button_mathMode("subtraction"))
button_multiply = Button(root, text="x",height=1, width=5, command= lambda: button_mathMode("multiplication"))
button_divide = Button(root, text="÷",height=1, width=5, command= lambda: button_mathMode("division"))

# set font size of buttons
buttonList = [button_1, button_2, button_3, button_4, button_5, 
              button_6, button_7, button_8, button_9, button_0, 
              button_dot, button_plusMinus, button_clear, button_equal, button_add, 
              button_subtract, button_multiply, button_divide]
myFont = font.Font(size=25, weight='bold')
for button in buttonList:
    button['font'] = myFont

# put buttons on screen
button_7.grid(row=1, column=0), button_8.grid(row=1, column=1), button_9.grid(row=1, column=2)
button_4.grid(row=2, column=0), button_5.grid(row=2, column=1), button_6.grid(row=2, column=2)
button_1.grid(row=3, column=0), button_2.grid(row=3, column=1), button_3.grid(row=3, column=2)
button_dot.grid(row=4, column=0), button_0.grid(row=4, column=1), button_plusMinus.grid(row=4, column=2)
button_add.grid(row=5, column=0), button_subtract.grid(row=5, column=1), button_clear.grid(row=5, column=2)
button_multiply.grid(row=6, column=0), button_divide.grid(row=6, column=1), button_equal.grid(row=6, column=2)

root.mainloop()